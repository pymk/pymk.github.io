[
  {
    "objectID": "posts/subscriptions-2023/index.html",
    "href": "posts/subscriptions-2023/index.html",
    "title": "Subscriptions 2023",
    "section": "",
    "text": "I thought to start the year right and make a budget.\nSubscriptions are sneaky… \n\n\nCode\ntibble::tribble(\n  ~Description, ~Category, ~Amount,\n  \"NextDNS\", \"Technology\", 2,\n  \"1Password\", \"Technology\", 3,\n  \"Car Insurance\", \"Insurance\", 140,\n  \"Firefox Relay\", \"Technology\", 5,\n  \"Google Domains\", \"Technology\", 10,\n  \"Google Fi\", \"Utilities\", 55,\n  \"HBO Max\", \"Entertainment\", 15,\n  \"iCloud\", \"Technology\", 1,\n  \"Internet\", \"Utilities\", 50,\n  \"Kagi\", \"Technology\", 10,\n  \"Mullvad VPN\", \"Technology\", 5,\n  \"Netflix\", \"Entertainment\", 20,\n  \"Pet Insurance\", \"Insurance\", 40,\n  \"Simple Login\", \"Technology\", 3,\n  \"YouTube Premium\", \"Entertainment\", 15\n) |>\n  dplyr::arrange(Amount) |>\n  gt::gt() |>\n  gt::summary_rows(\n    groups = NULL,\n    columns = \"Amount\",\n    fns = list(Total = ~ sum(., na.rm = TRUE)),\n    formatter = gt::fmt_currency,\n    currency = \"USD\",\n    decimals = 0\n  ) |>\n  gt::fmt_currency(\n    columns = Amount,\n    currency = \"USD\",\n    decimals = 0\n  ) |>\n  gt::tab_header(\n    title = \"Monthly Subscriptions\",\n    subtitle = \"2023\"\n  ) |>\n  gt::tab_options(\n    grand_summary_row.background.color = \"#E9E9E9\"\n  ) |>\n  gtExtras::gt_theme_nytimes()\n\n\n\n\n\n\n  \n    \n      Monthly Subscriptions\n    \n    \n      2023\n    \n  \n  \n    \n      \n      Description\n      Category\n      Amount\n    \n  \n  \n    \niCloud\nTechnology\n$1\n    \nNextDNS\nTechnology\n$2\n    \n1Password\nTechnology\n$3\n    \nSimple Login\nTechnology\n$3\n    \nFirefox Relay\nTechnology\n$5\n    \nMullvad VPN\nTechnology\n$5\n    \nGoogle Domains\nTechnology\n$10\n    \nKagi\nTechnology\n$10\n    \nHBO Max\nEntertainment\n$15\n    \nYouTube Premium\nEntertainment\n$15\n    \nNetflix\nEntertainment\n$20\n    \nPet Insurance\nInsurance\n$40\n    \nInternet\nUtilities\n$50\n    \nGoogle Fi\nUtilities\n$55\n    \nCar Insurance\nInsurance\n$140\n    Total\n—\n—\n$374"
  },
  {
    "objectID": "posts/dbt-tutorial/index.html",
    "href": "posts/dbt-tutorial/index.html",
    "title": "dbt Tutorial",
    "section": "",
    "text": "We were thinking about using dbt at work to help with our data pipeline, so I thought this winter break would be a good time to learn the basics.\nThey offer two products: dbt Cloud and dbt Core. As the name suggests, dbt Cloud is their subscription service and dbt Core is free CLI tool.\nI really like what they offer with this tool. Setting up models and creating tables with documentation and tests is really simple. Just gotta get used to writing SQL or Python commands instead of beautiful dplyr with pipes.\n\nThey have lots of nice guides, docs, and tutorials for learning. The one I started with is their jaffle_shop dbt Core tutorial.\nOne of the prerequisites is to set up BigQuery to access the data, but for learning purposes, I just wanted to run things locally. Could not find a guide or the dataset on their official channels, but I found the original CSV files for the tables in their repo history. It was probably from their earlier version of the tutorial.\nAnyway, I created this guide to use a local Postgres dataset for the jaffle_shop tutorial.\nNotes:\n\nCopy the data/ directory and its content to the project directory.\nEnsure you are in the project directory (i.e. /dbt-tutorial/jaffle_shop/) for running the Postgres and dbt commands below.\n\n\nFirst, install Postgres (I’m using ’Postgres app for macOS).\nIn terminal, we can login to Postgres as sudo with:\npsql -U postgres\nAnd use the command \\l to list of current databases available.\nNext, we create a user and database for jaffle_shop. In my example, the user is dbt_test (password: dbt_test) and the database is called jaffle_shop.\nCREATE USER dbt_test WITH PASSWORD 'adb_test';\nCREATE DATABASE jaffle_shop WITH OWNER 'dbt_test';\nUsing \\l, we can see the new database is created. Now we can exist sudo with \\q\nNow we can update the ~/.dbt/profiles.yml config file with:\ntype: postgres\nthreads: 4\nhost: localhost\nport: 5432\nuser: dbt_test\npass: dbt_test\ndbname: jaffle_shop\nschema: public\nNext, we login to jaffle_shop database as the new user (dbt_test) we just created:\npsql -U dbt_test jaffle_shop\nWe can use \\dt command to list all available tables (should be none right now) in this database.\nThe following commands create our tables (schema is based on the CSV files in the data/ folder).\nCREATE TABLE customers\n (id INTEGER, first_name TEXT, last_name TEXT, email TEXT);\n\nCREATE TABLE orders\n (id INTEGER, user_id INTEGER, order_date DATE, status TEXT);\n\nCREATE TABLE payments\n (id INTEGER, order_id INTEGER, payment_method TEXT, amount BigInt);\nNow we can run \\dt again to see a list of newly created tables.\nTo copy the contents of the CSV files into these tables, we use these commands:\n\\COPY customers(id,first_name,last_name,email) \nFROM './data/raw_customers.csv'\nWITH DELIMITER ','\nCSV HEADER;\n\n\\COPY orders(id,user_id,order_date,status)\nFROM './data/raw_orders.csv'\nWITH DELIMITER ','\nCSV HEADER;\n\n\\COPY payments(id,order_id,payment_method,amount)\nFROM './data/raw_payments.csv'\nWITH DELIMITER ','\nCSV HEADER;\nAnd a quick sanity check to ensure we have the data:\nSELECT * FROM customers ORDER BY id ASC LIMIT 10;\nSELECT * FROM orders ORDER BY id ASC LIMIT 10;\nSELECT * FROM payments ORDER BY id ASC LIMIT 10;\nAnd that’s it. We can quit at anytime with \\q and continue with the tutorial.\nThe example models created for this tutorial are also in here for reference."
  },
  {
    "objectID": "posts/software-design/index.html",
    "href": "posts/software-design/index.html",
    "title": "Software Design",
    "section": "",
    "text": "Found this great book called A Philosophy of Software Design by John Ousterhout and I am thoroughly enjoying it. I will use this post to write down my notes and summary to help retain the information.\n\n\nCode Complexity\nA complex code can be identified by the amount of time the developer has to spend learning and understanding the code (“cognitive load”) in order to make even simple changes. An example would be when making a simple update requires a lot of code modification throughout the code base. Or when updating part of the code unintentionally changes or breaks something else.\nIn order to reduce complexity, we can do a few things:\n\nHaving a simpler code by writing obvious code vs a clever, more complex ones\nReduce special cases, which helps reduce cognitive load\nAbstractions and encapsulation of complexities, so developers are only expose to it when needed\n\nComplexities are introduced incrementally, so a “zero tolerance” philosophy (more on this later) is required to stay vigilant. The two main culprits of code complexity are dependencies and obscurity. An example of dependency would be when a piece of code cannot be modified without having to update other code pieces and making changes. An example of obscurity would be lack of documentation or when important information in the code is not obvious.\nInstead of quickly pushing out code just to get the job done or meet a deadline (and accumulate technical debt), we should spend some time to come up with a design for the system. Think through a few alternative approaches before deciding the right one. When mistakes are identified, they should be fixed rather than patched around it.\n\n\nModular Design and Abstractions\nModular design is a way of breaking down a system into smaller parts. Abstraction is a way to hide away unimportant information or details that allow for easier understanding of the system.\nIdeally, each module should be independent of the other ones, so the complexities of a given module are self-contained. But interactivity and dependencies between modules are unavoidable, so the goal should be to minimize these dependencies.\nWhen creating a model, we should think about the interface (what it does) and implementation (how it does it) of the module. The module’s interface should be simple to reduce complexity of the overall system. We should also create “deep” module/classes/functions (powerful functionality, but simple interface) rather than “shallow” ones (complex interface, but simple functionality).\n\n\nDesign it Twice\nRather than implementing the first idea that comes to your head, spend some time and think about alternative approaches. For a more complex system, make a list of pros and cons. This should be applied to system, modules, or functions. It is better to spend some time up front to think about the design instead of spending days or weeks refactoring a bad design."
  },
  {
    "objectID": "posts/my-cat/index.html",
    "href": "posts/my-cat/index.html",
    "title": "My Cat",
    "section": "",
    "text": "She is a Russian Blue, super chill, and loves to loose her collar once a week."
  },
  {
    "objectID": "posts/zurich-switzerland/index.html",
    "href": "posts/zurich-switzerland/index.html",
    "title": "Zurich, Switzerland",
    "section": "",
    "text": "Instead of flying, I took an 8-hour train ride from Vanna to Zurich. Was it worth it? Yup! The tickets for the first-class was still a whole lot cheaper than flying, but the main beauty of it was the scenery, especially when passing through towns like Salzburg or as you get closer to Switzerland.\nOnce I arrived, I booked another hotel near the city center to be close to the attractions. Couldn’t do anything that first day because by the time I got there, it was already 4pm and I had to login to work.\nThe second day is when I went to exploring and see museums. Found a really good coffee shop that had the most amazing smoothies.\nOriginally I wanted to stay here a few more days and go to Belgium after, but I decided not to exhaust myself. Traveling so frequently is tiring and working in the evenings until 10 P.M. isn’t ideal (I’m a morning person!).\nSo I finished this journey here and booked a flight back to the Bay Area.\nFor my next trip, I think I want to travel to different cities and states in the U.S. (already have a list!).\nBucket-list for next visit: take a train ride (or stay at) some of the other cities like Vern, Geneva, Basel, and Lucerne (Mount Pilatus)."
  },
  {
    "objectID": "posts/oslo-norway/index.html",
    "href": "posts/oslo-norway/index.html",
    "title": "Oslo, Norway",
    "section": "",
    "text": "I started off with Oslo. I know a lot of folks come here and enjoy the sceneries and the hikes, but I was visiting family, so didn’t do any of that. Just mainly walked around the city and saw some of its museums and art scenes.\nWe visited Oslo in 2016, so it had been a few years. They’ve built a lot of things in the city center near the water (more restaurants and attractions) and it looks very modern. Because of the time zone difference, I didn’t really eat much when we were out, and by the time the jet-lag was wearing off, we were on the plane to the next destination.\nBucket-list for next visit: go hiking and try the salmon."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome",
    "section": "",
    "text": "First post! Not much to say, just wanted to initialize the blog post."
  },
  {
    "objectID": "posts/athens-greece/index.html",
    "href": "posts/athens-greece/index.html",
    "title": "Athens, Greece",
    "section": "",
    "text": "I picked Athens next because of all the historical places it has to offer. Plus, it was a quick 1.5 hour flight.\nOnce I arrived, I had to start work again (“working from home”), so I’d go out in the mornings and come back to my hotel room in the afternoons and work until bed time. I honestly didn’t think it would be this taxing to work late at night. Plus, I wear myself out in the mornings, so by the time it was work time, I was already ready to call it a day.\nUsed to work with this person who was based in Switzerland and would work in California time. She would be up until midnight and I never realized how hard that must have been. Well now I know. I don’t think it’s something I can do long-term.\nBucket-list for next visit: visit one of the Greek islands"
  },
  {
    "objectID": "posts/euro-trip-2022/index.html",
    "href": "posts/euro-trip-2022/index.html",
    "title": "Euro Trip 2022",
    "section": "",
    "text": "So I thought to take advantage of the remote work situation and travel a bit. In the past few years, I’ve only gone to a couple of places (RStudio Conference in Washington and a visit to the Grand Canyon in Arizona).\nI don’t travel much because I find it stressful a bit. I think it’s the planning part that I find tiring. BUT that’s a minor inconvenience and no reason for staying in one place and not see the world other cultures.\nSo I have family in Norway and Turkey, so I am starting this journey there. Going from California to Oslo, then Istanbul. After that, I have the flexibility to go anywhere."
  },
  {
    "objectID": "posts/xkcd-package/index.html",
    "href": "posts/xkcd-package/index.html",
    "title": "xkcdr Package",
    "section": "",
    "text": "I wanted to get more practice using the {covr} package, so I built a small R package that uses the xkcd comic’s API.\nYou can install the package from :\npak::pkg_install(\"pymk/xkcdr\")\nThere is only one exported function for this package: get_xkcd(). There is an optional parameter that can be passed to get a specific comic. Without it, the latest comic will be returned.\nWhat is returned is a {gt} table, which looks very polished as an HTML output.\nFor example, to view the comic 936, “Password Strength”, we run:\n\nxkcdr::get_xkcd(936)\n\n\n\n\n\n  \n    \n      Password Strength\n    \n    \n      Aug 10, 2011\n    \n  \n  \n    \n      xkcd #936\n    \n  \n  \n    \n  \n  \n    \n      https://xkcd.com/936/\n    \n  \n  \n    \n       To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize.\n    \n  \n\n\n\n\n\nSource: pymk/xkcdr"
  },
  {
    "objectID": "posts/online-privacy/index.html",
    "href": "posts/online-privacy/index.html",
    "title": "Online Privacy",
    "section": "",
    "text": "Initially I was writing about how at the beginning of each year, I go through my accounts and delete my online presence for services I no longer use. But that got me thinking about the different ways I try to keep my privacy online, which might be a fun thing to jot down."
  },
  {
    "objectID": "posts/online-privacy/index.html#email-accounts",
    "href": "posts/online-privacy/index.html#email-accounts",
    "title": "Online Privacy",
    "section": "Email Accounts",
    "text": "Email Accounts\nFirst things first, I have 4 main email accounts:\n\nPersonal use that I give to friends and family or sign up for important services (e.g. AWS, Steam, banking)\nOne that I use with accounts that I regularly use or have to tie to my identity (e.g. Comcast, vet, insurance)\nProfessional one that I only put on my resume\nA catch-all for disposable online accounts (e.g. stores)\n\nAll these email accounts have unique and strong, randomly generated passwords with multi-factor authentication enabled (MFA through auth app, not through SMS).\nFor random websites, I go the extra mile and use a separate email address on for every site (see Email Masking section)."
  },
  {
    "objectID": "posts/online-privacy/index.html#password-manager",
    "href": "posts/online-privacy/index.html#password-manager",
    "title": "Online Privacy",
    "section": "Password Manager",
    "text": "Password Manager\nI use 1Password and have been very happy with it (previously used KeePass). What I really like about it is how easy it is to organize and tag different records. You can also have multiple “vaults”. I have a personal one, a family one that I share with my family, one for traveling, and one for work credentials.\nIt also allows you to store different categories of credentials. For a simple login, you can even store the MFA code.\nOther Options: Bitwarden"
  },
  {
    "objectID": "posts/online-privacy/index.html#email-masking",
    "href": "posts/online-privacy/index.html#email-masking",
    "title": "Online Privacy",
    "section": "Email Masking",
    "text": "Email Masking\nI really like email masking feature and often use them even with my catch-all email accounts. I generate them through Firefox Relay, SimpleLogin and iCloud.\nFirefox Relay recently added phone number masking, which is fantastic.\nOther Options: SimpleLogin | iCloud | Fastmail"
  },
  {
    "objectID": "posts/online-privacy/index.html#vpn",
    "href": "posts/online-privacy/index.html#vpn",
    "title": "Online Privacy",
    "section": "VPN",
    "text": "VPN\nI also use Mullvad VPN, which is who Mozilla partnered with to provide their VPN service.\nOther Options: Mozilla VPN | Proton VPN"
  },
  {
    "objectID": "posts/online-privacy/index.html#browsing",
    "href": "posts/online-privacy/index.html#browsing",
    "title": "Online Privacy",
    "section": "Browsing",
    "text": "Browsing\nI use Firefox  and Orion as my main browsers. The only browser I am signed into with my Google account is Chrome , which is what I use to check my email or do anything related to my Google account. Outside of that, I only use Firefox or Orion.\nExtensions:\nOrion browser already comes with a bunch of privacy-focused defaults, but you can also install the same Firefox and Chrome extensions. The list below is the main extensions I use with Firefox and Chrome.\n\nTemporary Containers | Firefox Multi-Account Containers \nublock Origin  \nHTTPS Everywhere  \nPrivacy Badger  \nClear URLs"
  },
  {
    "objectID": "posts/online-privacy/index.html#extras-fun",
    "href": "posts/online-privacy/index.html#extras-fun",
    "title": "Online Privacy",
    "section": "Extras Fun",
    "text": "Extras Fun\n\nQuit social media\nSubscribe to Firefox Monitor\nKagi instead of Google\nPlace a credit report freeze\nUse a hardware authentication device for important accounts (I use Titan)\nDelete your old/unused accounts to reduce your online footprint\nRequest organizations to delete your account"
  },
  {
    "objectID": "posts/vienna-austria/index.html",
    "href": "posts/vienna-austria/index.html",
    "title": "Vienna, Austria",
    "section": "",
    "text": "By far my favorite city has been Vienna. The art, the architecture, the cleanliness, the ease of commuting (very pedestrian- and bike-friendly place)…\nI stayed in a hotel near the city center and walking to my destinations was a breeze. So many coffee shops, so many historical buildings, I loved everything about it.\nI’ll definitely come back again.\nBucket-list for next visit: stay in other cities like Salzburg."
  },
  {
    "objectID": "posts/istanbul-turkey/index.html",
    "href": "posts/istanbul-turkey/index.html",
    "title": "Istanbul, Turkey",
    "section": "",
    "text": "The second destination was Istanbul. My cousin and her family (and cat!) moved here a couple of years ago, so she really knew where to take us. She had lived here before when she was younger, so she even spoke the language. It was like having a personal concierge!\nReally had a wonderful time going around with her and eating all the food. So many pastries! I probably gained a few pounds this past week.\nOne of my favorite things was sleeping on her couch in the living room. Her apartment was on the top floor with 270 degree view of the city, so it looked magical at nights. Going to bed with that view and waking up to it in the morning… there was nothing like it.\nBucket-list for next visit: none!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "::blog",
    "section": "",
    "text": "Title\n\n\nDate\n\n\nCategories\n\n\nReading Time\n\n\n\n\n\n\nSoftware Design\n\n\nJan 7, 2023\n\n\ntech\n\n\n2 min\n\n\n\n\nOnline Privacy\n\n\nJan 2, 2023\n\n\ntech\n\n\n2 min\n\n\n\n\nSubscriptions 2023\n\n\nJan 1, 2023\n\n\nupdate\n\n\n1 min\n\n\n\n\ndbt Tutorial\n\n\nDec 31, 2022\n\n\ncode,dbt\n\n\n2 min\n\n\n\n\nxkcdr Package\n\n\nDec 28, 2022\n\n\ncode,R\n\n\n0 min\n\n\n\n\nMy Cat\n\n\nDec 18, 2022\n\n\npet\n\n\n0 min\n\n\n\n\nZurich, Switzerland\n\n\nOct 29, 2022\n\n\ntravel\n\n\n1 min\n\n\n\n\nVienna, Austria\n\n\nOct 27, 2022\n\n\ntravel\n\n\n0 min\n\n\n\n\nAthens, Greece\n\n\nOct 22, 2022\n\n\ntravel\n\n\n0 min\n\n\n\n\nIstanbul, Turkey\n\n\nOct 18, 2022\n\n\ntravel\n\n\n0 min\n\n\n\n\nOslo, Norway\n\n\nOct 12, 2022\n\n\ntravel\n\n\n0 min\n\n\n\n\nEuro Trip 2022\n\n\nOct 5, 2022\n\n\ntravel\n\n\n0 min\n\n\n\n\nWelcome\n\n\nOct 1, 2022\n\n\nupdate\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "::about",
    "section": "",
    "text": "Hello!\nMy name is Payam and I am an analytics engineer.\nMy interests and expertise include creating dashboards using Shiny and other BI tools, cleaning and validating data, setting up pipelines, and making analytical reports. I work in a clinical setting and primarily use R.\nOn my free time, I enjoy reading, tinkering, working out, and consuming media with my cat.\nFor my complete resume, please reach out to me at hello@pymk.dev.\n\n\n\n\nR, Shiny, SQL, Python, bash, git, AWS, Github Actions\nData engineering: data wrangling, cleaning, validation, and setting up data pipelines\nData visualization: generating reports and creating dashboards\nExperience working with sensitive data (PII, PHI, clinical, HR, sequestered)\n\n\n\n\n\n\n\nTitle\nCompany\nDates\n\n\n\n\nAnalytics Engineer\nDelfi Diagnostics\nApr 2022 - Present\n\n\nProgram Manager\nN-Power Medicine\nOct 2021 - Apr 2022\n\n\nData Analyst\nGRAIL\nJan 2018 - Oct 2021\n\n\nClinical Data Management\nGilead Sciences\nNov 2015 - Jan 2018\n\n\n\n\n\n\n\n\n\nDegree\nSchool\nGraduation Date\n\n\n\n\nM.S. Molecular Biology\nSan Jose State University\nAug 2015\n\n\nB.A. General Biology\nSan Francisco State University\nMay 2012"
  }
]